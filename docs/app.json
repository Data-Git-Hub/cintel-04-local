[{"name": "app.py", "content": "import os\nimport asyncio\nimport plotly.express as px\nfrom shiny import App, ui, render, reactive, Inputs\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\n# Set environment variables for TCL and TK\nos.environ['TCL_LIBRARY'] = r\"C:\\Program Files\\Python313\\tcl\\tcl8.6\"\nos.environ['TK_LIBRARY'] = r\"C:\\Program Files\\Python313\\tcl\\tk8.6\"\n\n# Use the Agg backend for Matplotlib (for headless environments)\nplt.switch_backend('Agg')\n\n# Load the palmerpenguins dataset\npenguins = load_penguins()\n\n# Define the server logic\ndef server(Inputs, output, session):\n    # Reactive function for filtered data based on the slider input\n    @reactive.Calc\n    def filtered_data():\n        return penguins[penguins[\"bill_length_mm\"] <= Inputs.slider()]\n\n    # Define a Matplotlib histogram (Plot 1)\n    def plot1():\n        fig, ax = plt.subplots()\n        data = filtered_data()\n        ax.hist(data[\"bill_length_mm\"], bins=30, color='skyblue', edgecolor='black')\n        ax.set_title(\"Penguins Bill Length Histogram (Matplotlib Version)\")\n        ax.set_xlabel(\"Bill Length (mm)\")\n        ax.set_ylabel(\"Frequency\")\n        return fig\n\n    output.plot1 = render.plot(plot1)\n\n    # Define Plot 2: Histogram for selected attribute using Matplotlib\n    @output\n    @render.plot\n    def plot2():\n        fig, ax = plt.subplots()\n        attribute = Inputs.selected_attribute()\n        ax.hist(penguins[attribute], bins=Inputs.plotly_bin_count(), color='red', edgecolor='black')\n        ax.set_title(f\"Penguins {attribute.replace('_', ' ').title()} Histogram (Matplotlib Version)\")\n        ax.set_xlabel(attribute.replace('_', ' ').title())\n        ax.set_ylabel(\"Frequency\")\n        return fig\n\n    # Seaborn histogram (Plot 3)\n    def plot3():\n        fig, ax = plt.subplots()\n        sns.histplot(\n            data=penguins,\n            x=\"bill_length_mm\",\n            bins=Inputs.seaborn_bin_count(),\n            hue=\"species\",\n            multiple=\"stack\",\n            ax=ax\n        )\n        ax.set_title(\"Palmer Penguins by Species\")\n        ax.set_xlabel(\"Bill Length (mm)\")\n        ax.set_ylabel(\"Number\")\n        return fig\n\n    output.plot3 = render.plot(plot3)\n\n    # Reactive function to filter data based on selected species\n    @reactive.Calc\n    def filtered_df():\n        selected_species = Inputs.species()\n        return penguins[penguins[\"species\"].isin(selected_species)]\n\n    # Define the Seaborn scatterplot (Length vs Depth)\n    @output\n    @render.plot\n    def length_depth():\n        fig, ax = plt.subplots()\n        sns.scatterplot(\n            data=filtered_df(),\n            x=\"bill_length_mm\",\n            y=\"bill_depth_mm\",\n            hue=\"species\",\n            ax=ax\n        )\n        ax.set_title(\"Scatterplot: Bill Length vs. Bill Depth by Species\")\n        ax.set_xlabel(\"Bill Length (mm)\")\n        ax.set_ylabel(\"Bill Depth (mm)\")\n        return fig\n\n    # Data Tab: Reactive function for body mass filter\n    @reactive.Calc\n    def filtered_data_table():\n        return penguins[penguins[\"body_mass_g\"] <= Inputs.body_mass_slider()]\n\n    # Render Data Table\n    @output\n    @render.data_frame\n    def penguins_table():\n        return filtered_data_table()\n\n    # Reactive function for year range filter\n    @reactive.Calc\n    def filtered_data_grid():\n        start_year, end_year = Inputs.year_range_slider()\n        return penguins[(penguins[\"year\"] >= start_year) & (penguins[\"year\"] <= end_year)]\n\n    # Render Data Grid\n    @output\n    @render.data_frame\n    def penguins_grid():\n        return filtered_data_grid()\n\n# Define the UI layout\napp_ui = ui.page_fluid(\n    ui.navset_pill(\n        ui.nav_panel(\"Graphics\", ui.layout_sidebar(\n            ui.sidebar(\n                ui.h2(\"Sidebar\"),\n                ui.input_slider(\"slider\", \"Max Bill Length (mm)\", min=33, max=60, value=45),\n                ui.input_selectize(\"selected_attribute\", \"Choose an Attribute\", choices=[\n                    \"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"\n                ]),\n                ui.input_numeric(\"plotly_bin_count\", \"Number of Bins for Plot2\", value=10),\n                ui.hr(),\n                ui.input_slider(\"seaborn_bin_count\", \"Number of Seaborn Bins\", min=5, max=50, value=20),\n                ui.input_checkbox_group(\n                    \"species\",\n                    \"Select Species\",\n                    [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n                    selected=[\"Adelie\", \"Gentoo\", \"Chinstrap\"]\n                ),\n                ui.hr(),\n                ui.a(\"Data-Git-Hub\", href=\"https://github.com/Data-Git-Hub\", target=\"_blank\")\n            ),\n            ui.div(\n                ui.output_plot(\"plot1\"),\n                ui.output_plot(\"plot2\"),\n                ui.output_plot(\"plot3\"),\n                ui.output_plot(\"length_depth\")\n            )\n        )),\n        ui.nav_panel(\"Data\", ui.layout_sidebar(\n            ui.sidebar(\n                ui.h2(\"Sidebar\"),\n                ui.input_slider(\"body_mass_slider\", \"Filter by Body Mass (g)\",\n                    min=penguins[\"body_mass_g\"].min(),\n                    max=penguins[\"body_mass_g\"].max(),\n                    value=penguins[\"body_mass_g\"].mean()\n                ),\n                ui.input_slider(\"year_range_slider\", \"Filter by Year\", min=2007, max=2009, value=(2007, 2009))\n            ),\n            ui.div(\n                ui.card(\n                    ui.card_header(\"Data Table\"),\n                    ui.output_data_frame(\"penguins_table\")\n                ),\n                ui.card(\n                    ui.card_header(\"Data Grid\"),\n                    ui.output_data_frame(\"penguins_grid\")\n                )\n            )\n        ))\n    )\n)\n\n# Create the app\napp = App(app_ui, server)\n\n# Run the app with asyncio compatibility\nif __name__ == \"__main__\":\n    import sys\n    if sys.platform.startswith(\"win\"):\n        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())\n    app.run(_loop=False)\n", "type": "text"}]